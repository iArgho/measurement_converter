/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package measurement;

/**
 *
 * @author Ar G Ho
 */
public class memoryconverter extends javax.swing.JFrame {

    /**
     * Creates new form memoryconverter
     */
    public memoryconverter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        bx2 = new javax.swing.JTextField();
        bx1 = new javax.swing.JTextField();
        d1 = new javax.swing.JComboBox<>();
        di = new javax.swing.JComboBox<>();
        Ad = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.setFont(new java.awt.Font("Marcellus SC", 2, 24)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 0, 51));
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Storage Converter");
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 39, 277, 81));
        getContentPane().add(bx2, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 202, 220, 47));
        getContentPane().add(bx1, new org.netbeans.lib.awtextra.AbsoluteConstraints(131, 202, 220, 47));

        d1.setFont(new java.awt.Font("Yu Gothic UI Light", 3, 18)); // NOI18N
        d1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "bit (b)", "byte (B)", "kilobyte (KB)", "megabyte (MB)", "gigabyte (GB)", "terabyte (TB)", "petabyte (PB)" }));
        d1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                d1ActionPerformed(evt);
            }
        });
        getContentPane().add(d1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 308, 299, 68));

        di.setFont(new java.awt.Font("Yu Gothic UI Light", 3, 18)); // NOI18N
        di.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "bit (b)", "byte (B)", "kilobyte (KB)", "megabyte (MB)", "gigabyte (GB)", "terabyte (TB)", "petabyte (PB)" }));
        di.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diActionPerformed(evt);
            }
        });
        getContentPane().add(di, new org.netbeans.lib.awtextra.AbsoluteConstraints(53, 304, 299, 68));

        Ad.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        Ad.setForeground(new java.awt.Color(255, 51, 51));
        Ad.setText("Convert");
        Ad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdActionPerformed(evt);
            }
        });
        getContentPane().add(Ad, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 308, 142, 48));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void d1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_d1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_d1ActionPerformed

    private void diActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_diActionPerformed

    private void AdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdActionPerformed
        // TODO add your handling code here:
        String bs1 = (String) di.getSelectedItem();
        String s1 = bx1.getText();
        String bs2 = (String) d1.getSelectedItem();
        double v = Double.valueOf(s1);
        if (bs1.equals("bit (b)")) {
            if (bs2.equals("bit (b)")) {
                bx2.setText(s1);
            } 
            else if (bs2.equals("byte (B)")) {
                v = v * 0.125;
                bx2.setText(Double.toString(v));
            } else if (bs2.equals("kilobyte (KB)")) {
                v = v * 0.000125;
               bx2.setText(Double.toString(v));
            } else if (bs2.equals("megabyte (MB)")) {
                v = v * 0.000000125;
               bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("gigabyte (GB)")) {
                v = v * 0.0000000000125;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("terabyte (TB")) {
                v = v *0.000000000000125;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("petabyte (PB)")) {
                v = v *0.000000000000000125;
                bx2.setText(Double.toString(v));
            }
        }
      
        
         if (bs1.equals("byte (B)")) {
            if (bs2.equals("byte (B)")) {
                bx2.setText(s1);
            } 
            else if (bs2.equals("bit (b)")) {
                v = v * 8;
                bx2.setText(Double.toString(v));
            } else if (bs2.equals("kilobyte (KB)")) {
                v = v * 0.001;
               bx2.setText(Double.toString(v));
            } else if (bs2.equals("megabyte (MB)")) {
                v = v * 0.000001;
               bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("gigabyte (GB)")) {
                v = v * 0.000000001;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("terabyte (TB)")) {
                v = v *0.000000000001;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("petabyte (PB)")) {
                v = v *00.000000000000001;
                bx2.setText(Double.toString(v));
            }
        } 
         
         
         
            if (bs1.equals("kilobyte (KB)")) {
            if (bs2.equals("kilobyte (KB)")) {
                bx2.setText(s1);
            } 
            else if (bs2.equals("bit (b)")) {
                v = v * 8000;
                bx2.setText(Double.toString(v));
            } else if (bs2.equals("byte (B)")) {
                v = v * 1000;
               bx2.setText(Double.toString(v));
            } else if (bs2.equals("megabyte (MB)")) {
                v = v * 00.001;
               bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("gigabyte (GB)")) {
                v = v * 0.000001;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("terabyte (TB)")) {
                v = v *0.000000001;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("petabyte (PB)")) {
                v = v *00.000000000001;
                bx2.setText(Double.toString(v));
            }
        } 
            
            
            
                if (bs1.equals("megabyte (MB)")) {
            if (bs2.equals("megabyte (MB)")) {
                bx2.setText(s1);
            } 
            else if (bs2.equals("bit (b)")) {
                v = v *  8000000;
                bx2.setText(Double.toString(v));
            } else if (bs2.equals("byte (B)")) {
                v = v * 1000000;
               bx2.setText(Double.toString(v));
            } else if (bs2.equals("kilobyte (KB)")) {
                v = v * 1000;
               bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("gigabyte (GB)")) {
                v = v * 0.001;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("terabyte (TB)")) {
                v = v *0.000001;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("petabyte (PB)")) {
                v = v *0.000000001;
                bx2.setText(Double.toString(v));
            }
        } 
                
         
            
                  
                if (bs1.equals("gigabyte (GB)")) {
            if (bs2.equals("gigabyte (GB)")) {
                bx2.setText(s1);
            } 
            else if (bs2.equals("bit (b)")) {
                v = v * 800000000;
                bx2.setText(Double.toString(v));
            } else if (bs2.equals("byte (B)")) {
                v = v * 1000000000;
               bx2.setText(Double.toString(v));
            } else if (bs2.equals("kilobyte (KB)")) {
                v = v * 1000000;
               bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("megabyte (MB)")) {
                v = v * 1000;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("terabyte (TB)")) {
                v = v *0.001;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("petabyte (PB)")) {
                v = v *0.000001;
                bx2.setText(Double.toString(v));
            }
        } 
                
                     
         
            
                  
                if (bs1.equals("terabyte (TB)")) {
            if (bs2.equals("terabyte (TB)")) {
                bx2.setText(s1);
            } 
            else if (bs2.equals("bit (b)")) {
                v = v * 800000000;
                bx2.setText(Double.toString(v));
            } else if (bs2.equals("byte (B)")) {
                v = v * 1000000000;
               bx2.setText(Double.toString(v));
            } else if (bs2.equals("kilobyte (KB)")) {
                v = v * 1000000000;
               bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("megabyte (MB)")) {
                v = v * 1000000;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("gigabyte (GB)")) {
                v = v *1000;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("petabyte (PB)")) {
                v = v *0.001;
                bx2.setText(Double.toString(v));
            }
        } 
                
            if (bs1.equals("petabyte (PB)")) {
            if (bs2.equals("petabyte (PB)")) {
                bx2.setText(s1);
            } 
            else if (bs2.equals("bit (b)")) {
                v = v * 800000000;
                bx2.setText(Double.toString(v));
            } else if (bs2.equals("byte (B)")) {
                v = v * 1000000000;
               bx2.setText(Double.toString(v));
            } else if (bs2.equals("kilobyte (KB)")) {
                v = v * 1000000000;
               bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("megabyte (MB)")) {
                v = v * 1000000000;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("gigabyte (GB)")) {
                v = v *1000000;
                bx2.setText(Double.toString(v));
            }
            else if (bs2.equals("terabyte (TB)")) {
                v = v *1000;
                bx2.setText(Double.toString(v));
            }
        } 
    }//GEN-LAST:event_AdActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(memoryconverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(memoryconverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(memoryconverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(memoryconverter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new memoryconverter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Ad;
    private javax.swing.JTextField bx1;
    private javax.swing.JTextField bx2;
    private javax.swing.JComboBox<String> d1;
    private javax.swing.JComboBox<String> di;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
